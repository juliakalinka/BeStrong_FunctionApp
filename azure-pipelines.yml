trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip-cache
  functionAppName: 'bestrong-app'
  pythonVersion: '3.9'
  environment: 'prod'  # or dev
  resourceGroupName: $[format('rg-{0}', variables['environment'])]
  devFunctionAppName: 'devbestrongfuncapp1'
  devResourceGroupName: 'rg-dev'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
      displayName: 'Use Python $(pythonVersion)'

    - task: Cache@2
      inputs:
        key: 'pip | "$(Agent.OS)" | **/requirements.txt'
        restoreKeys: |
          pip | "$(Agent.OS)"
        path: $(PIP_CACHE_DIR)
      displayName: Cache pip packages

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'
      condition: ne(variables['CacheRestored'], 'true')

    - script: |
        python -m pytest tests/ -v
      displayName: 'Run tests'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true
      displayName: 'Archive files'

    - task: AzureFunctionApp@1
      displayName: 'Deploy to Azure Functions'
      inputs:
        azureSubscription: 'your-subscription'
        appName: '$(functionAppName)'
        package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

    - task: AzureCLI@2
      displayName: 'Verify deployment status'
      inputs:
        azureSubscription: 'your-subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'echo "Checking deployment status..."; az functionapp show --name $(functionAppName) --resource-group $(resourceGroupName) --query "state"'

- stage: DeployDev
  displayName: 'Deploy to Dev'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployToDev
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: 'bestrong-arm'
              appName: '$(devFunctionAppName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'auto'

          - script: |
              echo "Checking environment variables:"
              echo "FileShareConnectionString exists: $([ ! -z "$(FileShareConnectionString)" ] && echo 'yes' || echo 'no')"
              echo "FormRecognizerEndpoint exists: $([ ! -z "$(FormRecognizerEndpoint)" ] && echo 'yes' || echo 'no')"
              echo "FormRecognizerKey exists: $([ ! -z "$(FormRecognizerKey)" ] && echo 'yes' || echo 'no')"
              echo "BlobStorageConnectionString exists: $([ ! -z "$(BlobStorageConnectionString)" ] && echo 'yes' || echo 'no')"
              echo "DiscordWebhookUrl exists: $([ ! -z "$(DiscordWebhookUrl)" ] && echo 'yes' || echo 'no')"
              echo "SlackWebhookUrl exists: $([ ! -z "$(SlackWebhookUrl)" ] && echo 'yes' || echo 'no')"
            displayName: 'Check Variables'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'bestrong-arm'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Setting app settings for function app $(devFunctionAppName) in resource group $(devResourceGroupName)"
                az functionapp config appsettings set --name $(devFunctionAppName) --resource-group $(devResourceGroupName) --settings \
                  FileShareConnectionString="$(FileShareConnectionString)" \
                  FormRecognizerEndpoint="$(FormRecognizerEndpoint)" \
                  FormRecognizerKey="$(FormRecognizerKey)" \
                  BlobStorageConnectionString="$(BlobStorageConnectionString)" \
                  DiscordWebhookUrl="$(DiscordWebhookUrl)" \
                  SlackWebhookUrl="$(SlackWebhookUrl)" \
                  WEBSITE_RUN_FROM_PACKAGE="1"
                
                echo "Verifying settings:"
                az functionapp config appsettings list --name $(devFunctionAppName) --resource-group $(devResourceGroupName)

- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToProduction
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: 'bestrong-arm'
              appName: '$(functionAppName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'auto'

          - script: |
              echo "Checking environment variables:"
              echo "FileShareConnectionString exists: $([ ! -z "$(FileShareConnectionString)" ] && echo 'yes' || echo 'no')"
              echo "FormRecognizerEndpoint exists: $([ ! -z "$(FormRecognizerEndpoint)" ] && echo 'yes' || echo 'no')"
              echo "FormRecognizerKey exists: $([ ! -z "$(FormRecognizerKey)" ] && echo 'yes' || echo 'no')"
              echo "BlobStorageConnectionString exists: $([ ! -z "$(BlobStorageConnectionString)" ] && echo 'yes' || echo 'no')"
              echo "DiscordWebhookUrl exists: $([ ! -z "$(DiscordWebhookUrl)" ] && echo 'yes' || echo 'no')"
              echo "SlackWebhookUrl exists: $([ ! -z "$(SlackWebhookUrl)" ] && echo 'yes' || echo 'no')"
            displayName: 'Check Variables'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'bestrong-arm'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Setting app settings for function app $(functionAppName) in resource group $(resourceGroupName)"
                az functionapp config appsettings set --name $(functionAppName) --resource-group $(resourceGroupName) --settings \
                  FileShareConnectionString="$(FileShareConnectionString)" \
                  FormRecognizerEndpoint="$(FormRecognizerEndpoint)" \
                  FormRecognizerKey="$(FormRecognizerKey)" \
                  BlobStorageConnectionString="$(BlobStorageConnectionString)" \
                  DiscordWebhookUrl="$(DiscordWebhookUrl)" \
                  SlackWebhookUrl="$(SlackWebhookUrl)" \
                  WEBSITE_RUN_FROM_PACKAGE="1"
                
                echo "Verifying settings:"
                az functionapp config appsettings list --name $(functionAppName) --resource-group $(resourceGroupName)
                
                echo "Checking specific settings:"
                az functionapp config appsettings list --name $(functionAppName) --resource-group $(resourceGroupName) --query "[?contains(name, 'FormRecognizer') || contains(name, 'BlobStorage') || contains(name, 'Discord') || contains(name, 'Slack')].{Name:name, Value:value}" -o table 