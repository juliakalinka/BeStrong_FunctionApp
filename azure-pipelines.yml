trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - '**/*.py'
    - 'requirements.txt'
    - 'host.json'
    - 'local.settings.json'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: pythonVersion
    value: '3.9'
  - name: environment
    value: 'prod'  # or dev
  - name: functionAppName
    value: $[format('{0}bestrongfuncapp1', variables['environment'])]
  - name: resourceGroupName
    value: $[format('rg-{0}', variables['environment'])]
  - name: devFunctionAppName
    value: 'devbestrongfuncapp1'
  - name: devResourceGroupName
    value: 'rg-dev'

stages:
- stage: Build
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Build'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - script: |
        echo "Preparing files for deployment..."
        mkdir $(Build.ArtifactStagingDirectory)/function_package
        cp function_app.py $(Build.ArtifactStagingDirectory)/function_package/
        cp host.json $(Build.ArtifactStagingDirectory)/function_package/
        cp requirements.txt $(Build.ArtifactStagingDirectory)/function_package/
        echo "Files copied to package directory"
        ls -la $(Build.ArtifactStagingDirectory)/function_package/
      displayName: 'Prepare Function Package'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/function_package'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - script: |
        echo "Verifying archive contents..."
        unzip -l $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Verify Archive Contents'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

- stage: DeployDev
  displayName: 'Deploy to Dev'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployToDev
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: 'bestrong-arm'
              appName: '$(devFunctionAppName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'auto'

          - script: |
              echo "Checking environment variables:"
              echo "FileShareConnectionString exists: $([ ! -z \"$(FileShareConnectionString)\" ] && echo 'yes' || echo 'no')"
              echo "FormRecognizerEndpoint exists: $([ ! -z \"$(FormRecognizerEndpoint)\" ] && echo 'yes' || echo 'no')"
              echo "FormRecognizerKey exists: $([ ! -z \"$(FormRecognizerKey)\" ] && echo 'yes' || echo 'no')"
              echo "BlobStorageConnectionString exists: $([ ! -z \"$(BlobStorageConnectionString)\" ] && echo 'yes' || echo 'no')"
              echo "DiscordWebhookUrl exists: $([ ! -z \"$(DiscordWebhookUrl)\" ] && echo 'yes' || echo 'no')"
              echo "SlackWebhookUrl exists: $([ ! -z \"$(SlackWebhookUrl)\" ] && echo 'yes' || echo 'no')"
            displayName: 'Check Variables'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'bestrong-arm'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Setting app settings for function app $(devFunctionAppName) in resource group $(devResourceGroupName)"
                az functionapp config appsettings set --name $(devFunctionAppName) --resource-group $(devResourceGroupName) --settings \
                  FileShareConnectionString="$(FileShareConnectionString)" \
                  FormRecognizerEndpoint="$(FormRecognizerEndpoint)" \
                  FormRecognizerKey="$(FormRecognizerKey)" \
                  BlobStorageConnectionString="$(BlobStorageConnectionString)" \
                  DiscordWebhookUrl="$(DiscordWebhookUrl)" \
                  SlackWebhookUrl="$(SlackWebhookUrl)" \
                  WEBSITE_RUN_FROM_PACKAGE="1"
                
                echo "Verifying settings:"
                az functionapp config appsettings list --name $(devFunctionAppName) --resource-group $(devResourceGroupName)

- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToProduction
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            inputs:
              azureSubscription: 'bestrong-arm'
              appName: '$(functionAppName)'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              deploymentMethod: 'auto'

          - script: |
              echo "Checking environment variables:"
              echo "FileShareConnectionString exists: $([ ! -z \"$(FileShareConnectionString)\" ] && echo 'yes' || echo 'no')"
              echo "FormRecognizerEndpoint exists: $([ ! -z \"$(FormRecognizerEndpoint)\" ] && echo 'yes' || echo 'no')"
              echo "FormRecognizerKey exists: $([ ! -z \"$(FormRecognizerKey)\" ] && echo 'yes' || echo 'no')"
              echo "BlobStorageConnectionString exists: $([ ! -z \"$(BlobStorageConnectionString)\" ] && echo 'yes' || echo 'no')"
              echo "DiscordWebhookUrl exists: $([ ! -z \"$(DiscordWebhookUrl)\" ] && echo 'yes' || echo 'no')"
              echo "SlackWebhookUrl exists: $([ ! -z \"$(SlackWebhookUrl)\" ] && echo 'yes' || echo 'no')"
            displayName: 'Check Variables'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'bestrong-arm'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Setting app settings for function app $(functionAppName) in resource group $(resourceGroupName)"
                az functionapp config appsettings set --name $(functionAppName) --resource-group $(resourceGroupName) --settings \
                  FileShareConnectionString="$(FileShareConnectionString)" \
                  FormRecognizerEndpoint="$(FormRecognizerEndpoint)" \
                  FormRecognizerKey="$(FormRecognizerKey)" \
                  BlobStorageConnectionString="$(BlobStorageConnectionString)" \
                  DiscordWebhookUrl="$(DiscordWebhookUrl)" \
                  SlackWebhookUrl="$(SlackWebhookUrl)" \
                  WEBSITE_RUN_FROM_PACKAGE="1"
                
                echo "Verifying settings:"
                az functionapp config appsettings list --name $(functionAppName) --resource-group $(resourceGroupName) 